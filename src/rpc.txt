
class RPC

    Represents an RPC call that we've made to a Client.

    Get one of these by calling Client::call(name, args).

    is_resolved()
        True if the RPC has returned; False if we're still waiting for
        the other process to get back to us.

    get_value()
        The return value of this RPC. Nil if it hasn't returned or has
        errored.

    get_error()
        If the RPC resulted in an error, this returns the error object.
        Otherwise, it returns nil.

    callback_t
    callback
    then(callback_t)
        You can associate a callback function with an RPC. This will not be
        automatically called by the Client/RPC system, so it should really be
        a void *userData pointer or a template parameter. But, since we know
        what type it'll be, let's just make it that type.

        Callbacks are called in app.mm.


TypedRPC<T>

    Give it an RPC, and it'll give you an RPC with a nicer interface which
    automatically converts between msgpack objects and your chosen type.


VoidRPC

    Use instead of TypedRPC<void>.
